{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u0442\u0435\u043c\u0435 \"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0430\u0439\u0442\u0430 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430\"","title":"Home"},{"location":"filters/","text":"test hello","title":"Filters"},{"location":"intro/","text":"\u0424\u0415\u0414\u0415\u0420\u0410\u041b\u042c\u041d\u041e\u0415 \u0413\u041e\u0421\u0423\u0414\u0410\u0420\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0415 \u0410\u0412\u0422\u041e\u041d\u041e\u041c\u041d\u041e\u0415 \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u041d\u041e\u0415 \u0423\u0427\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415 \u0412\u042b\u0421\u0428\u0415\u0413\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442 \u00ab\u0418\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439\u00bb \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u00ab45.03.04 \u0418\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0433\u0443\u043c\u0430\u043d\u0438\u0442\u0430\u0440\u043d\u043e\u0439 \u0441\u0444\u0435\u0440\u0435\u00bb \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0430\u0439\u0442\u0430 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430\" \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430: \u041f\u043b\u043e\u0442\u0441\u043a\u0430\u044f \u0414.\u0410., \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33422 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418. C\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433, 2022","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u0438\u043a"},{"location":"intro/#-","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430: \u041f\u043b\u043e\u0442\u0441\u043a\u0430\u044f \u0414.\u0410., \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33422 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418. C\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433, 2022","title":"\u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0430\u0439\u0442\u0430 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430\" \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\""},{"location":"lab1/","text":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM python:3.8.12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /project COPY . /project/ WORKDIR /project RUN pip install -r requirements.txt EXPOSE 8000 CMD python manage.py runserver 0.0.0.0:8000 Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM node:lts-alpine ENV PYTHONUNBUFFERED=1 WORKDIR /front COPY package*.json ./ RUN npm install COPY . . EXPOSE 8080 CMD [\"npm\", \"run\", \"serve\"] \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e docker-compose version: '3' services: tours_db: container_name: pg_container image: postgres ports: - \"5433:5432\" environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres - POSTGRES_DB=tours_db volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: admin@admin.com PGADMIN_DEFAULT_PASSWORD: root ports: - \"5050:80\" depends_on: - tours_db back: container_name: back build: context: . dockerfile: Dockerfile command: bash -c \"python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\" ports: - \"8000:8000\" front: container_name: tours_front build: ./front ports: - \"8080:8080\" depends_on: - back \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e python manage.py makmigrations python manage.py migrate \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438","title":"Lab1"},{"location":"lab1/#docker","text":"Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM python:3.8.12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /project COPY . /project/ WORKDIR /project RUN pip install -r requirements.txt EXPOSE 8000 CMD python manage.py runserver 0.0.0.0:8000 Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM node:lts-alpine ENV PYTHONUNBUFFERED=1 WORKDIR /front COPY package*.json ./ RUN npm install COPY . . EXPOSE 8080 CMD [\"npm\", \"run\", \"serve\"] \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e docker-compose version: '3' services: tours_db: container_name: pg_container image: postgres ports: - \"5433:5432\" environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres - POSTGRES_DB=tours_db volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: admin@admin.com PGADMIN_DEFAULT_PASSWORD: root ports: - \"5050:80\" depends_on: - tours_db back: container_name: back build: context: . dockerfile: Dockerfile command: bash -c \"python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\" ports: - \"8000:8000\" front: container_name: tours_front build: ./front ports: - \"8080:8080\" depends_on: - back \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e python manage.py makmigrations python manage.py migrate \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker"},{"location":"lab2/","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b 1) Tours By Count List class ToursByCountListView(generics.ListAPIView): serializer_class = TourSerializer pagination_class = CustomPagination def get_queryset(self): queryset = Tour.objects.all() count = self.request.query_params.get('count') if count: queryset = queryset.filter(count=count) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u0442\u0443\u0440\u044b, \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0440\u0430\u0432\u043d\u043e 5 2) Tours By Count Destination List class ToursByCountDestinationListView(generics.ListAPIView): serializer_class = TourSerializer def get_queryset(self): queryset = Tour.objects.all() count = self.request.query_params.get('count') destination = self.request.query_params.get('destination') if count and destination: queryset = queryset.filter(count=count, destination=destination) return queryset \u0417\u0430\u043f\u0440\u043e\u0441 \u0441 \u0442\u0443\u0440\u043e\u043c \u0432 \u0418\u0442\u0430\u043b\u0438\u044e, \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0440\u0430\u0432\u043d\u043e 19 3) Reservations By Count Approved List class ReservationsByCountApprovedListView(generics.ListAPIView): serializer_class = ReservationReadSerializer def get_queryset(self): queryset = Reservation.objects.all() user = self.request.user if user.is_authenticated: count = self.request.query_params.get('count') approved = self.request.query_params.get('approved') if count and approved: queryset = queryset.filter(count=count, approved=approved) return queryset \u041f\u043e\u0438\u0441\u043a \u0442\u0443\u0440\u0430 \u0441 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u043c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0430 \u0434\u0432\u0443\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b 1) Reviews Ordered Filter class ReviewsOrderedFilterView(generics.ListAPIView): def get_queryset(self): return Review.objects.filter( # reservation__tour_id=self.request.query_params.tour reservation__tour_id=self.kwargs.get('tour') ) serializer_class = ReviewSerializer filter_backends = (filters.OrderingFilter,) filterset_fields = 'stars' pagination_class = CustomPagination \u041e\u0442\u0437\u044b\u0432\u044b \u0434\u043b\u044f \u0442\u0443\u0440\u0430 \u0441 reservation__tour_id = 7 (\u0418\u0441\u043f\u0430\u043d\u0438\u044f) 2) Reservations Search Filter View All class ReservationsSearchFilterViewAll(generics.ListAPIView): queryset = Reservation.objects.all() serializer_class = ReservationReadSerializer filter_backends = (filters.SearchFilter,) pagination_class = CustomPagination search_fields = ('count', 'tour__destination') \u0422\u0443\u0440 \u0432 \u0418\u0441\u043f\u0430\u043d\u0438\u044e \u0441 \u0431\u0440\u043e\u043d\u044c\u044e \u043d\u0430 1 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 3) Tours Price Range Filter class ToursPriceRangeFilterView(generics.ListAPIView): queryset = Tour.objects.all() serializer_class = TourSerializer filterset_class = ToursPriceRangeFilter pagination_class = CustomPagination \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0446\u0435\u043d\u0435 \u043e\u0442 1000 \u0434\u043e 60000 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0412 Django REST \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e 1 \u0444\u0430\u0439\u043b\u0430 class ReviewPhoto(models.Model): review = models.ForeignKey('Review', on_delete=models.CASCADE, related_name='review_photos') file = models.FileField( validators=[validate_file_size, validate_file_type], upload_to=get_upload_path ) file_name = models.CharField(max_length=100, blank=True, null=True) file_size = models.IntegerField(blank=True, null=True) def __str__(self): return f'Photo in {str(self.review)}' def save(self, *args, **kwargs): self.file_name = self.file.name self.file_size = self.file.size super(ReviewPhoto, self).save(*args, **kwargs) validators.py from django.core.exceptions import ValidationError import magic def validate_file_size(file): MAX_MB = 5 limit = MAX_MB * 1024 * 1024 if file.size > limit: raise ValidationError(f'The file size is more than {MAX_MB} MB.') def validate_file_type(file): photo_extensions = ['image/png', 'image/jpeg', 'image/jpg'] content_type = magic.from_buffer(file.read(), mime=True) if content_type not in photo_extensions: raise ValidationError(f'Files of type {content_type} are not supported.') \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0414\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f Postman \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u041f\u0440\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0446\u0435\u043d\u044b \u0434\u043e 500000 \u0432\u0438\u0434\u0438\u043c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0432 settings.py REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 3, \"DEFAULT_AUTHENTICATION_CLASSES\": ( \"rest_framework_simplejwt.authentication.JWTAuthentication\", \"rest_framework.authentication.BasicAuthentication\", \"rest_framework.authentication.SessionAuthentication\" ), } \u0421\u0438\u0433\u043d\u0430\u043b\u044b \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. 1) \u0421\u0438\u0433\u043d\u0430\u043b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 @receiver(post_save, sender=Tour) def create_tour(sender, instance, created, **kwargs): if created: print(f'\\n{instance} \u0441\u043e\u0437\u0434\u0430\u043d!') \u0421\u0438\u0433\u043d\u0430\u043b \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b 2) \u0421\u0438\u0433\u043d\u0430\u043b \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0443\u0440\u0430 @receiver(pre_save, sender=Tour) def update_tour_price(sender, instance, **kwargs): try: prev_instance = Tour.objects.get(id=instance.id) instance.prev_price = prev_instance.price print(f'\u0426\u0435\u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430: {instance}\\n' f'\u0441\u0442\u043e\u0438\u043b: {instance.prev_price},\\n' f'\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0442\u043e\u0438\u0442: {instance.price}\\n') except ObjectDoesNotExist: pass \u0421\u0438\u0433\u043d\u0430\u043b \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b 3) \u0421\u0438\u0433\u043d\u0430\u043b \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 @receiver(pre_delete, sender=Tour) def delete_tour(sender, instance, **kwargs): with open('deleted_log.txt', 'a') as f: f.write(f'\u0422\u0443\u0440 {instance} \u0443\u0434\u0430\u043b\u0435\u043d\\n') \u0417\u0430\u043f\u0438\u0441\u044c \u0432 \u043b\u043e\u0433\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0421\u0442\u0430\u0442\u0443\u0441 200, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab2/#_1","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"lab2/#_2","text":"","title":"\u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"lab2/#1-tours-by-count-list","text":"class ToursByCountListView(generics.ListAPIView): serializer_class = TourSerializer pagination_class = CustomPagination def get_queryset(self): queryset = Tour.objects.all() count = self.request.query_params.get('count') if count: queryset = queryset.filter(count=count) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u0442\u0443\u0440\u044b, \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0440\u0430\u0432\u043d\u043e 5","title":"1) Tours By Count List"},{"location":"lab2/#2-tours-by-count-destination-list","text":"class ToursByCountDestinationListView(generics.ListAPIView): serializer_class = TourSerializer def get_queryset(self): queryset = Tour.objects.all() count = self.request.query_params.get('count') destination = self.request.query_params.get('destination') if count and destination: queryset = queryset.filter(count=count, destination=destination) return queryset \u0417\u0430\u043f\u0440\u043e\u0441 \u0441 \u0442\u0443\u0440\u043e\u043c \u0432 \u0418\u0442\u0430\u043b\u0438\u044e, \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0440\u0430\u0432\u043d\u043e 19","title":"2) Tours By Count Destination List"},{"location":"lab2/#3-reservations-by-count-approved-list","text":"class ReservationsByCountApprovedListView(generics.ListAPIView): serializer_class = ReservationReadSerializer def get_queryset(self): queryset = Reservation.objects.all() user = self.request.user if user.is_authenticated: count = self.request.query_params.get('count') approved = self.request.query_params.get('approved') if count and approved: queryset = queryset.filter(count=count, approved=approved) return queryset \u041f\u043e\u0438\u0441\u043a \u0442\u0443\u0440\u0430 \u0441 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u043c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0430 \u0434\u0432\u0443\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a","title":"3) Reservations By Count Approved List"},{"location":"lab2/#_3","text":"","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"lab2/#1-reviews-ordered-filter","text":"class ReviewsOrderedFilterView(generics.ListAPIView): def get_queryset(self): return Review.objects.filter( # reservation__tour_id=self.request.query_params.tour reservation__tour_id=self.kwargs.get('tour') ) serializer_class = ReviewSerializer filter_backends = (filters.OrderingFilter,) filterset_fields = 'stars' pagination_class = CustomPagination \u041e\u0442\u0437\u044b\u0432\u044b \u0434\u043b\u044f \u0442\u0443\u0440\u0430 \u0441 reservation__tour_id = 7 (\u0418\u0441\u043f\u0430\u043d\u0438\u044f)","title":"1) Reviews Ordered Filter"},{"location":"lab2/#2-reservations-search-filter-view-all","text":"class ReservationsSearchFilterViewAll(generics.ListAPIView): queryset = Reservation.objects.all() serializer_class = ReservationReadSerializer filter_backends = (filters.SearchFilter,) pagination_class = CustomPagination search_fields = ('count', 'tour__destination') \u0422\u0443\u0440 \u0432 \u0418\u0441\u043f\u0430\u043d\u0438\u044e \u0441 \u0431\u0440\u043e\u043d\u044c\u044e \u043d\u0430 1 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430","title":"2) Reservations Search Filter View All"},{"location":"lab2/#3-tours-price-range-filter","text":"class ToursPriceRangeFilterView(generics.ListAPIView): queryset = Tour.objects.all() serializer_class = TourSerializer filterset_class = ToursPriceRangeFilter pagination_class = CustomPagination \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0446\u0435\u043d\u0435 \u043e\u0442 1000 \u0434\u043e 60000","title":"3) Tours Price Range Filter"},{"location":"lab2/#_4","text":"\u0412 Django REST \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e 1 \u0444\u0430\u0439\u043b\u0430 class ReviewPhoto(models.Model): review = models.ForeignKey('Review', on_delete=models.CASCADE, related_name='review_photos') file = models.FileField( validators=[validate_file_size, validate_file_type], upload_to=get_upload_path ) file_name = models.CharField(max_length=100, blank=True, null=True) file_size = models.IntegerField(blank=True, null=True) def __str__(self): return f'Photo in {str(self.review)}' def save(self, *args, **kwargs): self.file_name = self.file.name self.file_size = self.file.size super(ReviewPhoto, self).save(*args, **kwargs) validators.py from django.core.exceptions import ValidationError import magic def validate_file_size(file): MAX_MB = 5 limit = MAX_MB * 1024 * 1024 if file.size > limit: raise ValidationError(f'The file size is more than {MAX_MB} MB.') def validate_file_type(file): photo_extensions = ['image/png', 'image/jpeg', 'image/jpg'] content_type = magic.from_buffer(file.read(), mime=True) if content_type not in photo_extensions: raise ValidationError(f'Files of type {content_type} are not supported.') \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0414\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f Postman \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"lab2/#_5","text":"\u041f\u0440\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0446\u0435\u043d\u044b \u0434\u043e 500000 \u0432\u0438\u0434\u0438\u043c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0432 settings.py REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 3, \"DEFAULT_AUTHENTICATION_CLASSES\": ( \"rest_framework_simplejwt.authentication.JWTAuthentication\", \"rest_framework.authentication.BasicAuthentication\", \"rest_framework.authentication.SessionAuthentication\" ), }","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"lab2/#_6","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.","title":"\u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"lab2/#1","text":"@receiver(post_save, sender=Tour) def create_tour(sender, instance, created, **kwargs): if created: print(f'\\n{instance} \u0441\u043e\u0437\u0434\u0430\u043d!') \u0421\u0438\u0433\u043d\u0430\u043b \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b","title":"1) \u0421\u0438\u0433\u043d\u0430\u043b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430"},{"location":"lab2/#2","text":"@receiver(pre_save, sender=Tour) def update_tour_price(sender, instance, **kwargs): try: prev_instance = Tour.objects.get(id=instance.id) instance.prev_price = prev_instance.price print(f'\u0426\u0435\u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430: {instance}\\n' f'\u0441\u0442\u043e\u0438\u043b: {instance.prev_price},\\n' f'\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0442\u043e\u0438\u0442: {instance.price}\\n') except ObjectDoesNotExist: pass \u0421\u0438\u0433\u043d\u0430\u043b \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b","title":"2) \u0421\u0438\u0433\u043d\u0430\u043b \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0443\u0440\u0430"},{"location":"lab2/#3","text":"@receiver(pre_delete, sender=Tour) def delete_tour(sender, instance, **kwargs): with open('deleted_log.txt', 'a') as f: f.write(f'\u0422\u0443\u0440 {instance} \u0443\u0434\u0430\u043b\u0435\u043d\\n') \u0417\u0430\u043f\u0438\u0441\u044c \u0432 \u043b\u043e\u0433\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0421\u0442\u0430\u0442\u0443\u0441 200, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e","title":"3) \u0421\u0438\u0433\u043d\u0430\u043b \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0443\u0440\u0430"},{"location":"lab3/","text":"\u0422\u0435\u0441\u0442\u044b \u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 destination class TourModelCreateTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from=datetime.date.today(), date_to=datetime.date.today(), hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_tour_destination(self): tour = Tour.objects.get(id=1) self.assertEquals(tour.destination, \"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\") \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 date_from class TourModelFieldTypeTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from=datetime.date.today(), date_to=datetime.date.today(), hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_date_from_field_type(self): tour = Tour.objects.get(id=1) date_from = tour._meta.get_field('date_from') self.assertTrue(isinstance(date_from, DateField)) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f class TourModelStrTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from=datetime.date.today(), date_to=datetime.date.today(), hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) def test_tour_empty_count(self): tour = Tour.objects.get(id=1) expected_value = tour.empty_count self.assertEquals(expected_value, 0) def test_tour_adjusted_empty_count(self): tour = Tour.objects.get(id=1) expected_value = tour.adjusted_empty_count(1) self.assertEquals(expected_value, 1) def test_tour_str(self): tour = Tour.objects.get(id=1) expected_tour_str = f\"\u0422\u0443\u0440 \\\"{tour.destination}\\\" ({tour.date_from} - {tour.date_to})\" self.assertEquals(str(tour), expected_tour_str) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0422\u0435\u0441\u0442\u044b \u043d\u0430 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430 class GetTourTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_get_tour(self): url = reverse('tours:tours', args=['1']) data = { \"count\": 1, \"next\": None, \"previous\": None, 'results': [{ 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435', 'empty_count': 1, 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 1, 'prev_price': 1000, 'price': 2000 }]} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0439 class SearchReservationsTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) Tour.objects.create( id=2, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) Reservation.objects.create( id=2, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) Reservation.objects.create( id=3, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=2), count=1, approved=True ) def test_search_reservations(self): url = reverse('tours:reservations_search2') data = { \"count\": 1, \"next\": None, \"previous\": None, 'results': [ { 'approved': True, 'count': 1, 'has_review': False, 'id': 3, 'total_price': 2000, 'tour': { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352', 'empty_count': 0, 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 2, 'prev_price': 1000, 'price': 2000}} ] } response = self.client.get(url, {'search': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352'}, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0443\u0440\u0430 class GetPriceRangeFilteredToursTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04351\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 1\", prev_price=1000, price=1000, count=1, ) Tour.objects.create( id=2, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 2\", prev_price=1000, price=2000, count=1, ) Tour.objects.create( id=3, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04353\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 3\", prev_price=1000, price=3000, count=1, ) def test_price_range_filter_tours(self): url = reverse('tours:tours_price_range') data = { 'count': 1, 'links': {'next': None, 'previous': None}, 'num_pages': 1, 'page_number': 1, 'results': [ { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352', 'empty_count': 1, 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 2', 'id': 2, 'prev_price': 1000, 'price': 2000 } ] } response = self.client.get(url, {'price_min': '1500', 'price_max': '2500', }, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0422\u0435\u0441\u0442\u044b \u043d\u0430 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0443\u0440\u0430 class CreateTourTest(TestCase): def test_create_tour(self): url = reverse('tours:create_tour') data = { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435', 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 1, 'prev_price': 1000, 'price': 2000, 'count': 0 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0439 \u0442\u0443\u0440\u0430 class CreateReservationTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04351\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 1\", prev_price=1000, price=1000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) def test_create_reservation(self): url = reverse('tours:create_reservation') data = { 'approved': True, 'count': 1, 'id': 1, 'tour': 1, 'user': 1 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043a \u0442\u0443\u0440\u0443 class CreateReviewTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04351\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 1\", prev_price=1000, price=1000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) def test_create_review(self): url = reverse('tours:create_review') data = { 'id': 1, 'reservation': 1, 'text': '\u041d\u0440\u0430\u0432\u0438\u0442\u0441\u044f!', 'stars': 5, } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0422\u0435\u0441\u0442\u044b \u043d\u0430 PATCH \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043a \u0442\u0443\u0440\u0443 class UpdateReviewTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) Review.objects.create( id=1, reservation=Reservation.objects.get(id=1), text='\u041e\u0442\u0437\u044b\u0432', stars=10 ) def test_update_review(self): get_url = reverse('tours:review', args=['1']) patch_url = reverse('tours:review', args=['1']) data = { 'id': 1, 'reservation': 1, 'text': '\u041e\u0442\u0437\u044b\u0432', 'stars': 10, } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['stars'] = 8 self.client.patch(patch_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0442\u0443\u0440\u0430 class UpdateTourPriceTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_update_price(self): get_url = reverse('tours:tour', args=['1']) patch_url = reverse('tours:tour', args=['1']) data = { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435', 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 1, 'prev_price': 1000, 'price': 2000, 'count': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['price'] = 3000 self.client.patch(patch_url, data, content_type='application/json') data['prev_price'] = 2000 changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0438 class UpdateReservationApprovalTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=False ) def test_update_approval(self): get_url = reverse('tours:reservation2', args=['1']) patch_url = reverse('tours:reservation2', args=['1']) data = { 'approved': False, 'count': 1, 'id': 1, 'tour': 1, 'user': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['approved'] = True self.client.patch(patch_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab3/#_1","text":"","title":"\u0422\u0435\u0441\u0442\u044b"},{"location":"lab3/#_2","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 destination class TourModelCreateTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from=datetime.date.today(), date_to=datetime.date.today(), hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_tour_destination(self): tour = Tour.objects.get(id=1) self.assertEquals(tour.destination, \"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\") \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 date_from class TourModelFieldTypeTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from=datetime.date.today(), date_to=datetime.date.today(), hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_date_from_field_type(self): tour = Tour.objects.get(id=1) date_from = tour._meta.get_field('date_from') self.assertTrue(isinstance(date_from, DateField)) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f class TourModelStrTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from=datetime.date.today(), date_to=datetime.date.today(), hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) def test_tour_empty_count(self): tour = Tour.objects.get(id=1) expected_value = tour.empty_count self.assertEquals(expected_value, 0) def test_tour_adjusted_empty_count(self): tour = Tour.objects.get(id=1) expected_value = tour.adjusted_empty_count(1) self.assertEquals(expected_value, 1) def test_tour_str(self): tour = Tour.objects.get(id=1) expected_tour_str = f\"\u0422\u0443\u0440 \\\"{tour.destination}\\\" ({tour.date_from} - {tour.date_to})\" self.assertEquals(str(tour), expected_tour_str) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab3/#get","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430 class GetTourTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_get_tour(self): url = reverse('tours:tours', args=['1']) data = { \"count\": 1, \"next\": None, \"previous\": None, 'results': [{ 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435', 'empty_count': 1, 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 1, 'prev_price': 1000, 'price': 2000 }]} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0439 class SearchReservationsTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) Tour.objects.create( id=2, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) Reservation.objects.create( id=2, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) Reservation.objects.create( id=3, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=2), count=1, approved=True ) def test_search_reservations(self): url = reverse('tours:reservations_search2') data = { \"count\": 1, \"next\": None, \"previous\": None, 'results': [ { 'approved': True, 'count': 1, 'has_review': False, 'id': 3, 'total_price': 2000, 'tour': { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352', 'empty_count': 0, 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 2, 'prev_price': 1000, 'price': 2000}} ] } response = self.client.get(url, {'search': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352'}, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0443\u0440\u0430 class GetPriceRangeFilteredToursTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04351\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 1\", prev_price=1000, price=1000, count=1, ) Tour.objects.create( id=2, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 2\", prev_price=1000, price=2000, count=1, ) Tour.objects.create( id=3, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04353\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 3\", prev_price=1000, price=3000, count=1, ) def test_price_range_filter_tours(self): url = reverse('tours:tours_price_range') data = { 'count': 1, 'links': {'next': None, 'previous': None}, 'num_pages': 1, 'page_number': 1, 'results': [ { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04352', 'empty_count': 1, 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 2', 'id': 2, 'prev_price': 1000, 'price': 2000 } ] } response = self.client.get(url, {'price_min': '1500', 'price_max': '2500', }, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"lab3/#post","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0443\u0440\u0430 class CreateTourTest(TestCase): def test_create_tour(self): url = reverse('tours:create_tour') data = { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435', 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 1, 'prev_price': 1000, 'price': 2000, 'count': 0 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0439 \u0442\u0443\u0440\u0430 class CreateReservationTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04351\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 1\", prev_price=1000, price=1000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) def test_create_reservation(self): url = reverse('tours:create_reservation') data = { 'approved': True, 'count': 1, 'id': 1, 'tour': 1, 'user': 1 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043a \u0442\u0443\u0440\u0443 class CreateReviewTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u04351\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f 1\", prev_price=1000, price=1000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) def test_create_review(self): url = reverse('tours:create_review') data = { 'id': 1, 'reservation': 1, 'text': '\u041d\u0440\u0430\u0432\u0438\u0442\u0441\u044f!', 'stars': 5, } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"lab3/#patch","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043a \u0442\u0443\u0440\u0443 class UpdateReviewTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=True ) Review.objects.create( id=1, reservation=Reservation.objects.get(id=1), text='\u041e\u0442\u0437\u044b\u0432', stars=10 ) def test_update_review(self): get_url = reverse('tours:review', args=['1']) patch_url = reverse('tours:review', args=['1']) data = { 'id': 1, 'reservation': 1, 'text': '\u041e\u0442\u0437\u044b\u0432', 'stars': 10, } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['stars'] = 8 self.client.patch(patch_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0442\u0443\u0440\u0430 class UpdateTourPriceTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) def test_update_price(self): get_url = reverse('tours:tour', args=['1']) patch_url = reverse('tours:tour', args=['1']) data = { 'date_from': '2022-08-14', 'date_to': '2022-08-21', 'destination': '\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435', 'hotel': '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f', 'id': 1, 'prev_price': 1000, 'price': 2000, 'count': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['price'] = 3000 self.client.patch(patch_url, data, content_type='application/json') data['prev_price'] = 2000 changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0438 class UpdateReservationApprovalTest(TestCase): @classmethod def setUpTestData(cls): Tour.objects.create( id=1, destination=\"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", date_from='2022-08-14', date_to='2022-08-21', hotel=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", prev_price=1000, price=2000, count=1, ) CustomUser.objects.create( id=1, first_name=\"\u0418\u043c\u044f\", last_name=\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", ) Reservation.objects.create( id=1, user=CustomUser.objects.get(id=1), tour=Tour.objects.get(id=1), count=1, approved=False ) def test_update_approval(self): get_url = reverse('tours:reservation2', args=['1']) patch_url = reverse('tours:reservation2', args=['1']) data = { 'approved': False, 'count': 1, 'id': 1, 'tour': 1, 'user': 1 } current_data = self.client.get(get_url, format='json') self.assertEqual(current_data.status_code, status.HTTP_200_OK) self.assertEqual(current_data.json(), data) data['approved'] = True self.client.patch(patch_url, data, content_type='application/json') changed_data = self.client.get(get_url, format='json') self.assertEqual(changed_data.status_code, status.HTTP_200_OK) self.assertEqual(changed_data.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 PATCH \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"lab4/","text":"\u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 vue.js \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \u041f\u043e\u0438\u0441\u043a \u0442\u0443\u0440\u043e\u0432 \u043f\u043e \u0446\u0435\u043d\u0435 \u0441 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u0446\u0435\u043d\u0435 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0442\u0443\u0440\u0430 \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0443 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0442\u0443\u0440\u043e\u0432 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \u0438 \u043f\u043e\u0438\u0441\u043a\u043e\u043c \u043f\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0432 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0414\u0435\u0442\u0430\u043b\u0438 \u0437\u0430\u043a\u0430\u0437\u0430 \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043a \u0442\u0443\u0440\u0443","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"lab4/#vuejs","text":"\u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:","title":"\u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 vue.js"},{"location":"lab4/#_1","text":"","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab4/#_2","text":"","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442"},{"location":"lab4/#_3","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439"},{"location":"lab4/#_4","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u0442\u0443\u0440\u043e\u0432 \u043f\u043e \u0446\u0435\u043d\u0435 \u0441 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u0446\u0435\u043d\u0435"},{"location":"lab4/#_5","text":"","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0442\u0443\u0440\u0430"},{"location":"lab4/#_6","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0443 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443"},{"location":"lab4/#_7","text":"","title":"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430"},{"location":"lab4/#_8","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0442\u0443\u0440\u043e\u0432 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \u0438 \u043f\u043e\u0438\u0441\u043a\u043e\u043c \u043f\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0432 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438"},{"location":"lab4/#_9","text":"","title":"\u0414\u0435\u0442\u0430\u043b\u0438 \u0437\u0430\u043a\u0430\u0437\u0430"},{"location":"lab4/#_10","text":"","title":"\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 \u043a \u0442\u0443\u0440\u0443"},{"location":"observation/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u0430 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u0442\u0435\u043a\u0430 Django + Vue JS + Docker \u0417\u0430\u0434\u0430\u0447\u0438: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django \u0438 DRF \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u043e\u043c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue JS \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Docker \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430: \u0421\u0430\u0439\u0442 \u0434\u043b\u044f \u0442\u0443\u0440\u0444\u0438\u0440\u043c\u044b, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u0443\u0441\u043b\u0443\u0433\u0438 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u0443 \u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0442\u0443\u0440\u043e\u0432.","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"observation/#_1","text":"","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"observation/#_2","text":"\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u0430 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u0442\u0435\u043a\u0430 Django + Vue JS + Docker","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"observation/#_3","text":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django \u0438 DRF \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u043e\u043c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue JS \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Docker","title":"\u0417\u0430\u0434\u0430\u0447\u0438:"},{"location":"observation/#_4","text":"\u0421\u0430\u0439\u0442 \u0434\u043b\u044f \u0442\u0443\u0440\u0444\u0438\u0440\u043c\u044b, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u0443\u0441\u043b\u0443\u0433\u0438 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u0443 \u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0442\u0443\u0440\u043e\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430:"},{"location":"work/","text":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM python:3.8.12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /project COPY . /project/ WORKDIR /project RUN pip install -r requirements.txt EXPOSE 8000 CMD python manage.py runserver 0.0.0.0:8000 Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM node:lts-alpine ENV PYTHONUNBUFFERED=1 WORKDIR /front COPY package*.json ./ RUN npm install COPY . . EXPOSE 8080 CMD [\"npm\", \"run\", \"serve\"] \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e docker-compose version: '3' services: tours_db: container_name: pg_container image: postgres ports: - \"5433:5432\" environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres - POSTGRES_DB=tours_db volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: admin@admin.com PGADMIN_DEFAULT_PASSWORD: root ports: - \"5050:80\" depends_on: - tours_db back: container_name: back build: context: . dockerfile: Dockerfile command: bash -c \"python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\" ports: - \"8000:8000\" front: container_name: tours_front build: ./front ports: - \"8080:8080\" depends_on: - back \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e python manage.py makmigrations python manage.py migrate \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"work/#docker","text":"Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM python:3.8.12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /project COPY . /project/ WORKDIR /project RUN pip install -r requirements.txt EXPOSE 8000 CMD python manage.py runserver 0.0.0.0:8000 Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 FROM node:lts-alpine ENV PYTHONUNBUFFERED=1 WORKDIR /front COPY package*.json ./ RUN npm install COPY . . EXPOSE 8080 CMD [\"npm\", \"run\", \"serve\"] \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e docker-compose version: '3' services: tours_db: container_name: pg_container image: postgres ports: - \"5433:5432\" environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres - POSTGRES_DB=tours_db volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: admin@admin.com PGADMIN_DEFAULT_PASSWORD: root ports: - \"5050:80\" depends_on: - tours_db back: container_name: back build: context: . dockerfile: Dockerfile command: bash -c \"python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\" ports: - \"8000:8000\" front: container_name: tours_front build: ./front ports: - \"8080:8080\" depends_on: - back \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e python manage.py makmigrations python manage.py migrate \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker"}]}